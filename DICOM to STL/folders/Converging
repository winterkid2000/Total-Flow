import os
import subprocess
import sys
from tqdm import tqdm
import nibabel as nib
import numpy as np
from skimage import measure
from skimage.filters import threshold_otsu
from stl import mesh  # numpy-stl

def validate_dicom_folder(folder_path: str) -> bool:
    for f in os.listdir(folder_path):
        if f.lower().endswith('.dcm') or not '.' in f:
            return True
    return False

def run_pancreas_segmentation(dicom_folder: str, output_folder: str):
    try:
        if not validate_dicom_folder(dicom_folder):
            print(f"DICOM 파일이 없는 것으로 보입니다: {dicom_folder}")
            return False

        os.makedirs(output_folder, exist_ok=True)

        segmentator_cmd = "TotalSegmentator"
        command = [
            segmentator_cmd,
            "-i", dicom_folder,
            "-o", output_folder,
            "--ml",
            "--roi_subset", "pancreas",
            "--output_type", "nifti"
        ]

        print(f"\n명령어 실행: {' '.join(command)}")
        result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(f"처리 완료: {dicom_folder}")

        log_file_path = os.path.join(output_folder, "pancreas_segmentation_log.txt")
        with open(log_file_path, "w", encoding="utf-8") as log_file:
            log_file.write("STDOUT\n")
            log_file.write(result.stdout)
            log_file.write("STDERRn")
            log_file.write(result.stderr)

        return True

    except subprocess.CalledProcessError as e:
        print(f"처리 실패: {dicom_folder}")
        print("실패한 명령어:", ' '.join(e.cmd))
        print("STDOUT:\n", e.stdout)
        print("STDERR:\n", e.stderr)
        return False

    except Exception as e:
        print(f"예외 발생: {dicom_folder}")
        print(str(e))
        return False

def rename_output(output_folder: str, phase: str) -> str:
    original_path = os.path.join(output_folder, "pancreas.nii.gz")
    if os.path.exists(original_path):
        new_name = f"{phase}_pancreas.nii.gz"
        new_path = os.path.join(output_folder, new_name)
        os.rename(original_path, new_path)
        print(f"→ 저장 완료: {new_path}")
        return new_path
    else:
        print(f"결과 파일 없음: {original_path}")
        return None

def nifti_to_stl(nifti_path: str, stl_path: str):
    img = nib.load(nifti_path)
    data = img.get_fdata()
    affine = img.affine

    valid_data = data[data > 0]
    if valid_data.size == 0:
        print(f"STL 변환 실패: {nifti_path}에 유효한 데이터 없음.")
        return False

    threshold = threshold_otsu(valid_data)
    print(f"Otsu 기반 임계값: {threshold:.3f}")

    binary_mask = data > threshold
    if not np.any(binary_mask):
        print(f"STL 변환 실패: {nifti_path}에서 유효한 마스크 없음.")
        return False

    verts, faces, _, _ = measure.marching_cubes(binary_mask, level=0)
    verts = nib.affines.apply_affine(affine, verts)

    stl_data = np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype)
    for i, f in enumerate(faces):
        for j in range(3):
            stl_data['vectors'][i][j] = verts[f[j], :]

    m = mesh.Mesh(stl_data)
    m.save(stl_path)
    print(f"STL 저장 완료: {stl_path}")
    return True

def main():
    print("예시: C:\Users\MIM\Desktop)
    base_path = input("상위 환자 폴더 경로를 입력하세요: ").strip()
    base_path = os.path.normpath(base_path)

    output_base_path = input("결과를 저장할 출력 폴더 경로를 입력하세요: ").strip()
    output_base_path = os.path.normpath(output_base_path)
    os.makedirs(output_base_path, exist_ok=True)

    if not os.path.exists(base_path):
        print(f"입력 경로가 존재하지 않습니다: {base_path}")
        sys.exit(1)

    failed_cases = []
    patient_folders = [d for d in os.listdir(base_path)
                       if os.path.isdir(os.path.join(base_path, d)) and d.isdigit()]

    for patient_id in tqdm(patient_folders, desc="전체 환자 진행률"):
        input_patient_folder = os.path.join(base_path, patient_id)

        for phase in ['PRE', 'POST']:
            input_phase_folder = os.path.join(base_path, phase)
            output_phase_folder = os.path.join(output_base_path, patient_id, phase)

            if not os.path.isdir(input_phase_folder):
                continue

            os.makedirs(output_phase_folder, exist_ok=True)

            print(f"\n처리 중: {input_phase_folder}")
            success = run_pancreas_segmentation(input_phase_folder, output_phase_folder)
            if not success:
                failed_cases.append(f"{patient_id}/{phase} (segmentation 실패)")
                continue

            nii_path = rename_output(output_phase_folder, phase)
            if not nii_path:
                failed_cases.append(f"{patient_id}/{phase} (결과 파일 없음)")
                continue

            stl_path = os.path.join(output_phase_folder, f"{phase}_{patient_id}_pancreas.stl")
            if not nifti_to_stl(nii_path, stl_path):
                failed_cases.append(f"{patient_id}/{phase} (STL 변환 실패)")

    if failed_cases:
        print("\n실패한 케이스 목록:")
        for item in failed_cases:
            print(" -", item)

        failed_path = os.path.join(output_base_path, "failed_cases.txt")
        with open(failed_path, "w", encoding="utf-8") as f:
            for item in failed_cases:
                f.write(item + "\n")

        print(f"\n실패 목록 저장됨: {failed_path}")
    else:
        print("\n모든 케이스가 성공적으로 처리되었습니다.")

if __name__ == "__main__":
    main()
